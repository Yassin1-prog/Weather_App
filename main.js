/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("let flag = 0;\nlet locatio;\n\nasync function getWeather(place) {\n  try {\n    const response = await fetch(\n      `https://api.weatherapi.com/v1/current.json?key=b82d8915a02847cbad2102228240202&q=${place}`,\n      { mode: \"cors\" }\n    );\n    if (!response.ok) {\n      throw new Error(\"Weather API request failed\");\n    }\n    const weather = await response.json();\n    if (flag === 0) {\n      display(weather);\n    } else {\n      displayFM(weather);\n    }\n  } catch (error) {\n    console.error(\"Error fetching weather:\", error);\n  }\n}\n\nasync function getGiph(photo) {\n  try {\n    const img = document.querySelector(\"#gph\");\n\n    const response = await fetch(\n      `https://api.giphy.com/v1/gifs/translate?key=T30kebQo5u4qSPUOCzOPvri24dKUnxhs&s=${photo} sky`,\n      { mode: \"cors\" }\n    );\n    if (!response.ok) {\n      throw new Error(\"Giphy API request failed\");\n    }\n    const giph = await response.json();\n    img.src = giph.data.images.original.url;\n    img.width = 450;\n    img.height = 350;\n  } catch (error) {\n    console.error(\"Error fetching Giphy:\", error);\n  }\n}\n\nconst details = document.querySelector(\".details\");\nconst icon = document.querySelector(\"#icon\");\nconst desc = document.querySelector(\".desc\");\nconst location = document.querySelector(\".location\");\nconst time = document.querySelector(\".time\");\nconst weather = document.querySelector(\".weather\");\nconst feel = document.querySelector(\".feel\");\nconst humidity = document.querySelector(\".humidity\");\nconst wind = document.querySelector(\".wind\");\nconst visibility = document.querySelector(\".visibility\");\nconst uv = document.querySelector(\".uv\");\nconst pressure = document.querySelector(\".pressure\");\n\nfunction display(result) {\n  details.style.visibility = \"visible\";\n  icon.src = result.current.condition.icon;\n  icon.width = 100;\n  icon.height = 100;\n\n  desc.textContent = result.current.condition.text;\n  console.log(result.current.condition.text);\n  getGiph(result.current.condition.text);\n\n  location.textContent = `${result.location.name}, ${result.location.country}`;\n  time.textContent = `${result.location.localtime}`;\n  weather.textContent = `${result.current.temp_c}\\u00B0C`;\n\n  feel.textContent = ` ${result.current.feelslike_c}\\u00B0C`;\n  humidity.textContent = ` ${result.current.humidity}`;\n  wind.textContent = ` ${result.current.wind_kph}kph`;\n  visibility.textContent = ` ${result.current.vis_km}km`;\n  uv.textContent = ` ${result.current.uv}`;\n  pressure.textContent = ` ${result.current.pressure_in}in`;\n}\n\nconst place = document.querySelector(\"input\");\nconst btn = document.querySelector(\"#btn\");\nbtn.addEventListener(\"click\", (e) => {\n  getWeather(place.value);\n  getForcast(place.value);\n  locatio = place.value;\n  place.value = \"\";\n  e.preventDefault();\n});\n\nfunction displayFM(result) {\n  details.style.visibility = \"visible\";\n  icon.src = result.current.condition.icon;\n  icon.width = 100;\n  icon.height = 100;\n\n  desc.textContent = result.current.condition.text;\n  getGiph(result.current.condition.text);\n\n  location.textContent = `${result.location.name}, ${result.location.country}`;\n  time.textContent = `${result.location.localtime}`;\n  weather.textContent = `${result.current.temp_f}\\u00B0F`;\n  feel.textContent = ` ${result.current.feelslike_f}\\u00B0F`;\n  humidity.textContent = ` ${result.current.humidity}`;\n  wind.textContent = ` ${result.current.wind_mph}mph`;\n  visibility.textContent = ` ${result.current.vis_miles}miles`;\n  uv.textContent = ` ${result.current.uv}`;\n  pressure.textContent = ` ${result.current.pressure_mb}mb`;\n}\n\nconst fmButton = document.querySelector(\".fm\");\nfmButton.addEventListener(\"click\", () => {\n  flag = 1;\n  getWeather(locatio);\n  getForcast(locatio);\n});\n\nconst ckButton = document.querySelector(\".ck\");\nckButton.addEventListener(\"click\", () => {\n  flag = 0;\n  getWeather(locatio);\n  getForcast(locatio);\n});\n\nasync function getForcast(place) {\n  try {\n    const response = await fetch(\n      `https://api.weatherapi.com/v1/forecast.json?key=b82d8915a02847cbad2102228240202&q=${place}&days=3`,\n      { mode: \"cors\" }\n    );\n    if (!response.ok) {\n      throw new Error(\"Weather API  forecast request failed\");\n    }\n    const future = await response.json();\n    showForecast(future);\n  } catch (error) {\n    console.error(\"Error fetching forecast:\", error);\n  }\n}\n\nfunction getDayName(dateString) {\n  const daysOfWeek = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const date = new Date(dateString);\n\n  const dayOfWeek = date.getDay();\n\n  return daysOfWeek[dayOfWeek];\n}\n\nfunction showForecast(future) {\n  const placeholder = document.querySelector(\".forecast\");\n  placeholder.textContent = \"\";\n  for (let i = 0; i < 3; i++) {\n    const div = document.createElement(\"div\");\n    div.classList.add(\"day\");\n    const container = document.createElement(\"span\");\n    const day = document.createElement(\"span\");\n    const deg = document.createElement(\"span\");\n    const img = document.createElement(\"img\");\n    img.classList.add(\"wet\");\n\n    day.textContent = getDayName(future.forecast.forecastday[i].date);\n\n    img.src = future.forecast.forecastday[i].day.condition.icon;\n    if (flag === 0) {\n      deg.textContent = `${future.forecast.forecastday[i].day.avgtemp_c}\\u00B0C`;\n    } else {\n      deg.textContent = `${future.forecast.forecastday[i].day.avgtemp_f}\\u00B0F`;\n    }\n    container.appendChild(img);\n    container.appendChild(deg);\n\n    div.appendChild(day);\n    div.appendChild(container);\n\n    placeholder.appendChild(div);\n  }\n}\n\n\n//# sourceURL=webpack://html_css_js_template/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;